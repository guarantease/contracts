archetype campaign(
  const renter: address, 
  const rent_token: address,
  const max_expiry: date,
  // FA 1.2
  const max_supply : nat, 
  const metadata_coin : bytes
)

import usdc from "./contracts/usdc/usdc.arl"

states = | DepositsEnabled initial | SearchingOwner | Expired | Locked

// Storage

//// Token Metadata

constant TOKEN_ID : nat = 0
constant init_time : date = now

asset token_metadata to big_map {
  ftoken_metadata : nat;
  token_id        : nat;
  token_info      : map<string, bytes>;
} initialized with {
  {TOKEN_ID; TOKEN_ID; [("", metadata_coin)]}
}


// Getters

//// FA 1.2

view vgetBalance (owner : address) : nat {
  return (ledger[owner] ? the.tokens : 0)
}

view vgetTotalSupply () : nat {
  return total_supply
}

//// FA 1.2

variable total_supply: nat = 0

asset ledger identified by holder to big_map {
  holder     : address;
  tokens     : nat = 0;
}

// Entry

entry buy_shares(amount: nat) {
  no transfer
  require {
    correct_amount: max_supply >= amount + total_supply;
    not_expired_to_buy: init_time + 4w > now;
  }
  effect {
    total_supply += amount;
    ledger.add_update(caller, { tokens += (amount) });
    transfer 0tz to rent_token call %transfer<address * address * nat>((caller, self_address, amount));
  }
}

transition close_deposits(){
  no transfer
  require {
    max: max_supply = total_supply;
  }
  from DepositsEnabled
  to SearchingOwner
}

transition settle_lock(owner: address, rent: nat, expiry: date) {
  no transfer
  called by renter
  require {
    not_expired: init_time + 4w > now;
    all_funds_collected: total_supply = max_supply;
    valid_expiry: expiry <= max_expiry;
    valid_rent: rent <= max_supply / ((max_expiry - now) / 4w)
  }
  from SearchingOwner
  to Locked
  with effect {
    const op_addr : (operation * address) = create_contract("./contracts/leaseManager/leaseManager.tz", none, 0tz, (
      0i,
      rent_token,
      max_supply,
      0,
      0i,
      rent,
      expiry,
      now,
      owner
    ));
    operations := [op_addr[0]];
    transfer 0tz to entry usdc(rent_token).approve((op_addr[1], total_supply));
  }
}

transition cancel_campaign_for_insufficient_funds() {
  no transfer
  require {
    campaign_expired: init_time + 4w < now;
  }
  from DepositsEnabled
  to Expired
}

transition cancel_campaign_for_no_owner() {
  no transfer
  require {
    expired: init_time + 4w < now;
  }
  from SearchingOwner
  to Expired
}

entry refund_shares() {
  no transfer
  state is Expired
  effect {
    const caller_balance ?= call_view<nat>(self_address, "vgetBalance", caller) : 0;
    transfer 0tz to rent_token call %transfer<address * address * nat>((self_address, caller, caller_balance));
    ledger.remove(caller);
  }
}

getter getAllowance (owner : address, spender : address) : nat {
  return 0
}

getter getBalance (owner : address) : nat {
  return (ledger[owner] ? the.tokens : 0)
}

getter getTotalSupply () : nat {
  return total_supply
}